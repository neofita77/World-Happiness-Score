{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##importing a packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##instaling geopandas and plotly.plotly\n",
    "!conda update -n base conda --yes\n",
    "!conda install fiona pyproj six --yes\n",
    "!conda install geopandas --yes\n",
    "!conda install fiona=1.6 --yes\n",
    "!conda install -c https://conda.anaconda.org/plotly plotly --yes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##importing data  \n",
    "import geopandas as gpd\n",
    "import plotly.plotly as py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##importing data\n",
    "data2015_df = pd.read_csv('2015.csv')\n",
    "data2016_df = pd.read_csv('2016.csv')\n",
    "data2017_df = pd.read_csv('2017.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data2015_df.info()\n",
    "data2016_df.info()\n",
    "data2017_df.info()\n",
    "\n",
    "data2015_df.head()\n",
    "data2016_df.head()\n",
    "data2017_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##adding yer to data\n",
    "data2015_df['Year'] = 2015\n",
    "data2016_df['Year'] = 2016\n",
    "data2017_df['Year'] = 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data2015_df.info()\n",
    "data2016_df.info()\n",
    "data2017_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##adding region to data from 2017 year\n",
    "##merging data\n",
    "data_merg = pd.merge(data2015_df, data2016_df, how = 'outer', on = 'Country')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_merg.info()\n",
    "data_merg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##filling empty values with other variable\n",
    "data_merg = data_merg[['Country', 'Region_x', 'Region_y']] ##merging data with 'merg' method \n",
    "data_merg.Region_x.fillna(data_merg.Region_y, inplace=True) ##filling empty spaces with another variable\n",
    "del data_merg['Region_y'] ##deleting column\n",
    "data_merg.columns = 'Country Region'.split() ##splitting columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_merg.info()\n",
    "data_merg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data2017_df_reg = pd.merge(data2017_df, data_merg, how = 'inner', on = 'Country') ##merging data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data2017_df_reg.info()\n",
    "data2017_df_reg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merging all data together - country\n",
    "data2015_df_country = data2015_df.set_index('Country') ##changing index in data frame\n",
    "del data2015_df_country['Standard Error'] ##deleting column\n",
    "\n",
    "data2016_df_country = data2016_df.set_index('Country') ##changing index in data frame \n",
    "del data2016_df_country['Lower Confidence Interval']  ##deleting column\n",
    "del data2016_df_country['Upper Confidence Interval']  ##deleting column\n",
    "del data2016_df_country['Region']  ##deleting column\n",
    "\n",
    "data2017_df_country = data2017_df_reg.set_index('Country') ##changing index in data frame\n",
    "del data2017_df_country['Whisker.high']  ##deleting column\n",
    "del data2017_df_country['Whisker.low']  ##deleting column\n",
    "del data2017_df_country['Region']  ##deleting column\n",
    "##changing columns name and positions in data frame\n",
    "data2017_df_country = data2017_df_country.rename(columns={data2017_df_country.columns[0]: 'Happiness Rank',\n",
    "                                               data2017_df_country.columns[1]: 'Happiness Score',\n",
    "                                               data2017_df_country.columns[2]: 'Economy (GDP per Capita)',\n",
    "                                               data2017_df_country.columns[4]: 'Health (Life Expectancy)',\n",
    "                                               data2017_df_country.columns[7]: 'Trust (Government Corruption)',\n",
    "                                               data2017_df_country.columns[8]: 'Dystopia Residual'})\n",
    "data2017_df_country = data2017_df_country[['Happiness Rank', 'Happiness Score', 'Economy (GDP per Capita)',\n",
    "                                'Family', 'Health (Life Expectancy)', 'Freedom', 'Trust (Government Corruption)',\n",
    "                                'Generosity', 'Dystopia Residual', 'Year']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data2015_df_country.info()\n",
    "data2016_df_country.info()\n",
    "data2017_df_country.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merging data with 'concat' method \n",
    "data_all_country = pd.concat([data2015_df_country, data2016_df_country, data2017_df_country], axis = 1, join = 'inner')\n",
    "data_all_region = pd.concat([data2015_df_country, data2016_df_country, data2017_df_country], axis = 1, join = 'inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_all_country.info()\n",
    "data_all_country.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##average per country plus sorting and rounding\n",
    "del data_all_country['Year']\n",
    "del data_all_country['Region']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_all_sumc = data_all_country.sum(level=0, axis=1) ##sum up data from three years per country\n",
    "data_all_divc = data_all_sumc.div(3) ##divide those data by 3 (mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_all_divc = data_all_divc.round(4) ##rounding data\n",
    "data_avg_country = data_all_divc.sort_values(by = 'Happiness Score', ascending = False) ##sorting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_avg_country['Nr'] = np.arange(len(data_avg_country)) ##counting all rows\n",
    "data_avg_country['Nr'] = data_avg_country['Nr'] + 1 ##counting all rows starts from one\n",
    "data_avg_country['x'] = '.' ##creating an auxiliary variable\n",
    "data_avg_country['y'] = '|' ##creating an auxiliary variable\n",
    "data_avg_country.reset_index(level=0, inplace=True) ##resetting index\n",
    "##copying variable and changing type of it\n",
    "data_avg_country['Happiness Score new'] = data_avg_country['Happiness Score'].apply(str)\n",
    "data_avg_country['Nr'] = data_avg_country['Nr'].apply(str) ##changing type of variable\n",
    "##creating new variable from few other\n",
    "data_avg_country['Country'] = data_avg_country['Nr'] + data_avg_country['x'] + data_avg_country['Country'] + data_avg_country['y'] + data_avg_country['Happiness Score new']\n",
    "data_avg_country = data_avg_country.set_index('Country') ##changing index in data frame\n",
    "data_avg_country = data_avg_country.sort_values(by = 'Happiness Score', ascending = True) ##sorting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_avg_country.info()\n",
    "data_avg_country.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##average per region plus sorting and rounding\n",
    "data_all_regionidx = data_all_region.set_index('Region') ##changing index in data frame\n",
    "del data_all_regionidx['Year'] ##deleting column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_all_sumr = data_all_regionidx.sum(level=0, axis=1) ##sum up data from three years per region\n",
    "data_all_divr = data_all_sumr.div(3) ##divide those data by 3 (mean)\n",
    "data_all_bpr = data_all_divr[['Happiness Score']]\n",
    "data_all_divr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_all_divr = data_all_divr.groupby(['Region']).mean() ##counting the average in groups\n",
    "data_all_divr = data_all_divr.round(4) ##rounding data\n",
    "data_avg_region = data_all_divr.sort_values(by = 'Happiness Score', ascending = False) ##sorting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_avg_region['Nr'] = np.arange(len(data_avg_region)) ##counting all rows\n",
    "data_avg_region['Nr'] = data_avg_region['Nr'] + 1 ##counting all rows starts from one\n",
    "data_avg_region['x'] = '.' ##creating an auxiliary variable\n",
    "data_avg_region['y'] = '|' ##creating an auxiliary variable\n",
    "data_avg_region.reset_index(level=0, inplace=True) ##resetting index\n",
    "##copying variable and changing type of it\n",
    "data_avg_region['Happiness Score new'] = data_avg_region['Happiness Score'].apply(str)\n",
    "data_avg_region['Nr'] = data_avg_region['Nr'].apply(str) ##changing type of variable\n",
    "##creating new variable from few other\n",
    "data_avg_region['Region'] = data_avg_region['Nr'] + data_avg_region['x'] + data_avg_region['Region'] + data_avg_region['y'] + data_avg_region['Happiness Score new']\n",
    "data_avg_region = data_avg_region.set_index('Region') ##changing index in data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_avg_region = data_avg_region.sort_values(by = 'Happiness Score', ascending = True) ##sorting data\n",
    "data_avg_region"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_avg_region.info()\n",
    "data_avg_region"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##correlation matrix with 'corr' function\n",
    "data_corr = data_avg_country.drop(data_avg_country.columns[[0]], axis=1)\n",
    "corr = data_corr.corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##correlation heatmap with 'heatmap' method\n",
    "matplotlib.get_backend()\n",
    "fig, (ax) = plt.subplots(1, 1, figsize=(12,9))\n",
    "sns.set_context(\"poster\")\n",
    "\n",
    "hm = sns.heatmap(corr, \n",
    "                 ax=ax,         \n",
    "                 cmap=\"coolwarm\", \n",
    "                 annot=True, \n",
    "                 fmt='.2f',       \n",
    "                 linewidths=.05)\n",
    "\n",
    "fig.subplots_adjust(top=0.93)\n",
    "title_obj = fig.suptitle('Correlation Heatmap for Variables', \n",
    "              fontsize=18, \n",
    "              fontweight='bold')\n",
    "plt.setp(title_obj, color='navy')\n",
    "plt.show()\n",
    "\n",
    "##saving plot with optimal size\n",
    "figure = hm.get_figure()    \n",
    "figure.savefig('correlation_heatmap.png', dpi=900, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##jointplots with histograms and linear relation with happiness score\n",
    "jp1 = sns.jointplot('Economy (GDP per Capita)', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp2 = sns.jointplot('Family', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp3 = sns.jointplot('Health (Life Expectancy)', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp4 = sns.jointplot('Freedom', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp5 = sns.jointplot('Trust (Government Corruption)', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp6 = sns.jointplot('Generosity', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "jp7 = sns.jointplot('Dystopia Residual', 'Happiness Score', data=data_avg_country, kind='reg', color='teal')\n",
    "\n",
    "##saving plots with optimal size  \n",
    "jp1.savefig('jp1.png', dpi=450, bbox_inches='tight')\n",
    "jp2.savefig('jp2.png', dpi=450, bbox_inches='tight')\n",
    "jp3.savefig('jp3.png', dpi=450, bbox_inches='tight')\n",
    "jp4.savefig('jp4.png', dpi=450, bbox_inches='tight')\n",
    "jp5.savefig('jp5.png', dpi=450, bbox_inches='tight')\n",
    "jp6.savefig('jp6.png', dpi=450, bbox_inches='tight')\n",
    "jp7.savefig('jp7.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##data for dynamics plot - country  \n",
    "data_dyn2016c = data2016_df[['Country', 'Happiness Score']] ##new data frame  \n",
    "  \n",
    "data_dyn2017c = data2017_df[['Country', 'Happiness.Score']] ##new data frame  \n",
    "data_dyn2017c = data_dyn2017c.rename(columns={data_dyn2017c.columns[1]: 'Happiness Score'}) ##renaming columns  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_dyn2016c.info()\n",
    "data_dyn2017c.info()\n",
    "\n",
    "data_dyn2016c.head()\n",
    "data_dyn2017c.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merging data with 'merg' method\n",
    "data_dyn1716c = pd.merge(data_dyn2017c, data_dyn2016c, how = 'inner', on = 'Country')\n",
    "data_dyn1716c.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dyn1716c['Dynamics'] = data_dyn1716c['Happiness Score_x'] - data_dyn1716c['Happiness Score_y'] ##counting dynamics  \n",
    "data_dyn_country = data_dyn1716c[['Country', 'Dynamics']] ##new data frame  \n",
    "data_dyn_country = data_dyn_country.sort_values(by = 'Dynamics', ascending = False) ##sorting  \n",
    "data_dyn_country['Nr'] = np.arange(len(data_dyn_country)) ##counting all rows  \n",
    "data_dyn_country['Nr'] = data_dyn_country['Nr'] + 1 ##counting all rows starts from one  \n",
    "data_dyn_country['x'] = '.' ##creating an auxiliary variable  \n",
    "data_dyn_country['Nr'] = data_dyn_country['Nr'].apply(str) ##changing type of variable  \n",
    "##creating new variable from few other  \n",
    "data_dyn_country['Country'] = data_dyn_country['Nr'] + data_dyn_country['x'] + data_dyn_country['Country'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_dyn_country.info()\n",
    "data_dyn_country.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##data for dynamics plot - region  \n",
    "data_dyn2016r = data2016_df[['Country', 'Region', 'Happiness Score']] ##new data frame  \n",
    "  \n",
    "data_dyn2017r = data2017_df[['Country', 'Happiness.Score']] ##new data frame  \n",
    "data_dyn2017r = data_dyn2017.rename(columns={data_dyn2017.columns[1]: 'Happiness Score'}) ##renaming columns  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##inspecting data\n",
    "data_dyn2016r.info()\n",
    "data_dyn2017r.info()\n",
    "\n",
    "data_dyn2017r.head()\n",
    "data_dyn2016r.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merging data with 'merge' method  \n",
    "data_dyn1716r = pd.merge(data_dyn2017r, data_dyn2016r, how = 'inner', on = 'Country')  \n",
    "data_dyn1716r = data_dyn1716r[['Region', 'Happiness Score_x', 'Happiness Score_y']] ##new data frame  \n",
    "data_dyn1716r['Dynamics'] = data_dyn1716r['Happiness Score_x'] - data_dyn1716r['Happiness Score_y'] ##counting dynamics  \n",
    "data_dyn_region = data_dyn1716r[['Region', 'Dynamics']] ##new data frame  \n",
    "data_dyn_region.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dyn_region = data_dyn_region.groupby('Region', as_index=False)['Dynamics'].mean() ##counting mean in group  \n",
    "data_dyn_region = data_dyn_region.round(4) ##rounding data  \n",
    "data_dyn_region = data_dyn_region.sort_values(by = 'Dynamics', ascending = False) ##sorting data  \n",
    "data_dyn_region['Nr'] = np.arange(len(data_avg_region)) ##counting all rows  \n",
    "data_dyn_region['Nr'] = data_dyn_region['Nr'] + 1 ##counting all rows starts from one  \n",
    "data_dyn_region['x'] = '.' ##creating an auxiliary variable  \n",
    "data_dyn_region['Nr'] = data_dyn_region['Nr'].apply(str) ##changing type of variable  \n",
    "##creating new variable from few other  \n",
    "data_dyn_region['Region'] = data_dyn_region['Nr'] + data_dyn_region['x'] + data_dyn_region['Region']  \n",
    "data_dyn_region  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##bar plot with 'plot' method - Region\n",
    "data_avg_regionbp = data_avg_region[['Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)', 'Freedom', \n",
    "                      'Trust (Government Corruption)', 'Generosity', 'Dystopia Residual']]\n",
    "\n",
    "bpr = data_avg_regionbp.plot(kind='barh', stacked=True, figsize=(17.5,13), colormap='Spectral', fontsize=22).legend(loc=4, prop={'size':18})\n",
    "##modifying title and labels  \n",
    "plt.xlim([0, 8])\n",
    "title_obj = plt.title('Average Ranking of Happiness Score 2015–2017|Regions', fontsize=22)         \n",
    "plt.setp(title_obj, color='navy')\n",
    "x_obj = plt.xlabel('Score', fontsize=20)\n",
    "plt.setp(x_obj, color='navy')\n",
    "y_obj = plt.ylabel('Region', fontsize=20)\n",
    "plt.setp(y_obj, color='navy')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "##saving plot\n",
    "figure = bpr.get_figure()    \n",
    "figure.savefig('hs_barplot_regions.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##bar plot with 'plot' method - dynamics per Region  \n",
    "data_dyn_regionidx = data_dyn_region.set_index('Region') ##changing index in data frame  \n",
    "data_dyn_regionidx = data_dyn_regionidx.sort_values(by = 'Dynamics', ascending = True) ##sorting data  \n",
    "##creating difference between minus and plus values  \n",
    "data_dyn_regionidx['positive'] = data_dyn_regionidx['Dynamics'] > 0  \n",
    "  \n",
    "bpdr = data_dyn_regionidx['Dynamics'].plot(kind='barh', figsize=(17,10), fontsize=22, color=data_dyn_regionidx.positive.map({True: 'lime', False: 'red'}))  \n",
    "##modifying title and labels  \n",
    "plt.xlim([-0.11, 0.075])  \n",
    "title_obj = plt.title('Average Dynamics of Happiness Score 2016–2017|Regions', fontsize=22)           \n",
    "plt.setp(title_obj, color='navy')  \n",
    "x_obj = plt.xlabel('Dynamics', fontsize=20)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Region', fontsize=20)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "##for y, x in enumerate(data_dyn_regionidx['Dynamics']):  \n",
    "##plt.annotate(str(x), xy=(x, y), ha='center', va='center')  \n",
    "#plt.show()  \n",
    "rects = bpdr.patches  \n",
    "for rect in rects:  \n",
    "    ##get X and Y placement of label from rect.  \n",
    "    x_value = rect.get_width()  \n",
    "    y_value = rect.get_y() + rect.get_height() / 2  \n",
    "  \n",
    "    ##number of points between bar and label. Change to your liking.  \n",
    "    space = -1  \n",
    "    ##vertical alignment for positive values  \n",
    "    ha = 'left'  \n",
    "  \n",
    "    ##if value of bar is negative: Place label left of bar  \n",
    "    if x_value < 0:  \n",
    "        ##invert space to place label to the left  \n",
    "        space *= -1  \n",
    "        ##horizontally align label at right  \n",
    "        ha = 'right'  \n",
    "  \n",
    "    ##use X value as label and format number with four decimal place  \n",
    "    label = \"{:.4f}\".format(x_value)  \n",
    "  \n",
    "    ##create annotation  \n",
    "    plt.annotate(  \n",
    "        label,                      ##use `label` as label  \n",
    "        (x_value, y_value),         ##place label at end of the bar  \n",
    "        xytext=(space, 0),          ##horizontally shift label by `space`  \n",
    "        textcoords=\"offset points\", ##interpret `xytext` as offset in points  \n",
    "        va='center',                ##vertically center label  \n",
    "        ha=ha,  \n",
    "        fontsize=20)  \n",
    "      \n",
    "plt.show()  \n",
    "  \n",
    "##saving plot  \n",
    "figure = bpdr.get_figure()      \n",
    "figure.savefig('hs_dynamics_barplot_regions.png', dpi=450, bbox_inches='tight')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "##bar plot with 'plot' method - Country (selected rows)  \n",
    "##new data frame  \n",
    "data_avg_countrybp = data_avg_country[['Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)', 'Freedom', \n",
    "                      'Trust (Government Corruption)', 'Generosity', 'Dystopia Residual']]\n",
    "\n",
    "bpc4 = data_avg_countrybp.iloc[0:37].plot(kind='barh', stacked=True, figsize=(17.5,13), colormap='Spectral', fontsize=22).legend(loc=4, prop={'size':18})\n",
    "##modifying title and labels\n",
    "plt.xlim([0, 6])\n",
    "title_obj = plt.title('Average Ranking of Happiness Score 2015–2017|Country-Part4', fontsize=22)         \n",
    "plt.setp(title_obj, color='navy')\n",
    "x_obj = plt.xlabel('Score', fontsize=20)\n",
    "plt.setp(x_obj, color='navy')\n",
    "y_obj = plt.ylabel('Country', fontsize=20)\n",
    "plt.setp(y_obj, color='navy')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "##saving plot\n",
    "figure = bpc4.get_figure()    \n",
    "figure.savefig('hs_barplot_country4.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpc3 = data_avg_countrybp.iloc[37:75].plot(kind='barh', stacked=True, figsize=(17.5,13), colormap='Spectral', fontsize=22).legend(loc=4, prop={'size':18})\n",
    "##modifying title and labels\n",
    "plt.xlim([0, 7])\n",
    "title_obj = plt.title('Average Ranking of Happiness Score 2015–2017|Country-Part3', fontsize=22)         \n",
    "plt.setp(title_obj, color='navy')\n",
    "x_obj = plt.xlabel('Score', fontsize=20)\n",
    "plt.setp(x_obj, color='navy')\n",
    "y_obj = plt.ylabel('Country', fontsize=20)\n",
    "plt.setp(y_obj, color='navy')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "##saving plot\n",
    "figure = bpc3.get_figure()    \n",
    "figure.savefig('hs_barplot_country3.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpc2 = data_avg_countrybp.iloc[75:111].plot(kind='barh', stacked=True, figsize=(17.5,13), colormap='Spectral', fontsize=22).legend(loc=4, prop={'size':18})\n",
    "##modifying title and labels\n",
    "plt.xlim([0, 8.5])\n",
    "title_obj = plt.title('Average Ranking of Happiness Score 2015–2017|Country-Part2', fontsize=22)         \n",
    "plt.setp(title_obj, color='navy')\n",
    "x_obj = plt.xlabel('Score', fontsize=20)\n",
    "plt.setp(x_obj, color='navy')\n",
    "y_obj = plt.ylabel('Country', fontsize=20)\n",
    "plt.setp(y_obj, color='navy')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "##saving plot\n",
    "figure = bpc2.get_figure()    \n",
    "figure.savefig('hs_barplot_country2.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpc1 = data_avg_countrybp.iloc[111:146].plot(kind='barh', stacked=True, figsize=(17.5,13), colormap='Spectral', fontsize=22).legend(loc=4, prop={'size':18})\n",
    "##modifying title and labels  \n",
    "plt.xlim([0, 10])\n",
    "title_obj = plt.title('Average Ranking of Happiness Score 2015–2017|Country-Part1', fontsize=22)         \n",
    "plt.setp(title_obj, color='navy')\n",
    "x_obj = plt.xlabel('Score', fontsize=20)\n",
    "plt.setp(x_obj, color='navy')\n",
    "y_obj = plt.ylabel('Country', fontsize=20)\n",
    "plt.setp(y_obj, color='navy')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "##saving plot\n",
    "figure = bpc1.get_figure()    \n",
    "figure.savefig('hs_barplot_country1.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###bar plot with 'plot' method - Country (selected rows)  \n",
    "data_dyn_countryidx = data_dyn_country.set_index('Country') ##changing index in data frame  \n",
    "data_dyn_countryidx = data_dyn_countryidx.sort_values(by = 'Dynamics', ascending = True) ##sorting data  \n",
    "  \n",
    "bpdc4 = data_dyn_countryidx['Dynamics'].iloc[0:38].plot(kind='barh', figsize=(15,10), fontsize=16, color='red')  \n",
    "##modifying title and labels  \n",
    "plt.xlim([-0.9, 0])  \n",
    "title_obj = plt.title('Average Dynamics of Happiness Score 2016–2017|Country-Part4', fontsize=22)           \n",
    "plt.setp(title_obj, color='navy')  \n",
    "x_obj = plt.xlabel('Dynamics', fontsize=20)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Country', fontsize=20)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "rects = bpdc4.patches  \n",
    "for rect in rects:  \n",
    "    ##get X and Y placement of label from rect.  \n",
    "    x_value = rect.get_width()  \n",
    "    y_value = rect.get_y() + rect.get_height() / 2  \n",
    "  \n",
    "    ##number of points between bar and label. Change to your liking.  \n",
    "    space = 5  \n",
    "    ##vertical alignment for positive values  \n",
    "    ha = 'left'  \n",
    "  \n",
    "    ##if value of bar is negative: Place label left of bar  \n",
    "    if x_value < 0:  \n",
    "        ##invert space to place label to the left  \n",
    "        space *= -1  \n",
    "        ##horizontally align label at right  \n",
    "        ha = 'right'  \n",
    "  \n",
    "    ##use X value as label and format number with four decimal place  \n",
    "    label = \"{:.4f}\".format(x_value)  \n",
    "  \n",
    "    ##create annotation  \n",
    "    plt.annotate(  \n",
    "        label,                      ##use `label` as label  \n",
    "        (x_value, y_value),         ##place label at end of the bar  \n",
    "        xytext=(space, 0),          ##horizontally shift label by `space`  \n",
    "        textcoords=\"offset points\", ##interpret `xytext` as offset in points  \n",
    "        va='center',                ##vertically center label  \n",
    "        ha=ha,  \n",
    "        fontsize=16)  \n",
    "    \n",
    "plt.show()  \n",
    "  \n",
    "##saving plot  \n",
    "figure = bpdc4.get_figure()      \n",
    "figure.savefig('hs_dynamics_barplot_country4.png', dpi=450, bbox_inches='tight')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpdc3 = data_dyn_countryidx['Dynamics'].iloc[38:76].plot(kind='barh', figsize=(15,10), fontsize=16, color='red')  \n",
    "##modifying title and labels  \n",
    "plt.xlim([-0.08, 0.005])  \n",
    "title_obj = plt.title('Average Dynamics of Happiness Score 2016–2017|Country-Part3', fontsize=22)           \n",
    "plt.setp(title_obj, color='navy')  \n",
    "x_obj = plt.xlabel('Dynamics', fontsize=20)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Country', fontsize=20)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "rects = bpdc3.patches  \n",
    "for rect in rects:  \n",
    "    ##get X and Y placement of label from rect.  \n",
    "    x_value = rect.get_width()  \n",
    "    y_value = rect.get_y() + rect.get_height() / 2  \n",
    "  \n",
    "    ##number of points between bar and label. Change to your liking.  \n",
    "    space = 5  \n",
    "    ##vertical alignment for positive values  \n",
    "    ha = 'left'  \n",
    "  \n",
    "    ##if value of bar is negative: Place label left of bar  \n",
    "    if x_value < 0:  \n",
    "        ##invert space to place label to the left  \n",
    "        space *= -1  \n",
    "        ##horizontally align label at right  \n",
    "        ha = 'right'  \n",
    "  \n",
    "    ##use X value as label and format number with four decimal place  \n",
    "    label = \"{:.4f}\".format(x_value)  \n",
    "  \n",
    "    ##create annotation  \n",
    "    plt.annotate(  \n",
    "        label,                      ##use `label` as label  \n",
    "        (x_value, y_value),         ##place label at end of the bar  \n",
    "        xytext=(space, 0),          ##horizontally shift label by `space`  \n",
    "        textcoords=\"offset points\", ##interpret `xytext` as offset in points  \n",
    "        va='center',                ##vertically center label  \n",
    "        ha=ha,  \n",
    "        fontsize=16)  \n",
    "      \n",
    "plt.show()  \n",
    "  \n",
    "##saving plot  \n",
    "figure = bpdc3.get_figure()      \n",
    "figure.savefig('hs_dynamics_barplot_country3.png', dpi=450, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpdc2 = data_dyn_countryidx['Dynamics'].iloc[76:112].plot(kind='barh', figsize=(15,10), fontsize=16, color='lime')  \n",
    "##modifying title and labels  \n",
    "plt.xlim([0, 0.09])  \n",
    "title_obj = plt.title('Average Dynamics of Happiness Score 2016–2017|Country-Part2', fontsize=22)           \n",
    "plt.setp(title_obj, color='navy')  \n",
    "x_obj = plt.xlabel('Dynamics', fontsize=20)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Country', fontsize=20)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "rects = bpdc2.patches  \n",
    "for rect in rects:  \n",
    "    ##get X and Y placement of label from rect.  \n",
    "    x_value = rect.get_width()  \n",
    "    y_value = rect.get_y() + rect.get_height() / 2  \n",
    "  \n",
    "    ##number of points between bar and label. Change to your liking.  \n",
    "    space = 5  \n",
    "    ##vertical alignment for positive values  \n",
    "    ha = 'left'  \n",
    "  \n",
    "    ##if value of bar is negative: Place label left of bar  \n",
    "    if x_value < 0:  \n",
    "        ##invert space to place label to the left  \n",
    "        space *= -1  \n",
    "        ##horizontally align label at right  \n",
    "        ha = 'right'  \n",
    "  \n",
    "    ##use X value as label and format number with four decimal place  \n",
    "    label = \"{:.4f}\".format(x_value)  \n",
    "  \n",
    "    ##create annotation  \n",
    "    plt.annotate(  \n",
    "        label,                      ##use `label` as label  \n",
    "        (x_value, y_value),         ##place label at end of the bar  \n",
    "        xytext=(space, 0),          ##horizontally shift label by `space`  \n",
    "        textcoords=\"offset points\", ##interpret `xytext` as offset in points  \n",
    "        va='center',                ##vertically center label  \n",
    "        ha=ha,  \n",
    "        fontsize=16)                 \n",
    "      \n",
    "plt.show()  \n",
    "  \n",
    "##saving plot  \n",
    "figure = bpdc2.get_figure()      \n",
    "figure.savefig('hs_dynamics_barplot_country2.png', dpi=450, bbox_inches='tight')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpdc1 = data_dyn_countryidx['Dynamics'].iloc[112:150].plot(kind='barh', figsize=(15,10), fontsize=16, color='lime')  \n",
    "##modifying title and labels  \n",
    "plt.xlim([0, 0.55])  \n",
    "title_obj = plt.title('Average Dynamics of Happiness Score 2016–2017|Country-Part1', fontsize=22)           \n",
    "plt.setp(title_obj, color='navy')  \n",
    "x_obj = plt.xlabel('Dynamics', fontsize=20)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Country', fontsize=20)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "rects = bpdc1.patches  \n",
    "for rect in rects:  \n",
    "    ##get X and Y placement of label from rect.  \n",
    "    x_value = rect.get_width()  \n",
    "    y_value = rect.get_y() + rect.get_height() / 2  \n",
    "  \n",
    "    ##number of points between bar and label. Change to your liking.  \n",
    "    space = 5  \n",
    "    ##vertical alignment for positive values  \n",
    "    ha = 'left'  \n",
    "  \n",
    "    ##if value of bar is negative: Place label left of bar  \n",
    "    if x_value < 0:  \n",
    "        ##invert space to place label to the left  \n",
    "        space *= -1  \n",
    "        ##horizontally align label at right  \n",
    "        ha = 'right'  \n",
    "  \n",
    "    ##use X value as label and format number with four decimal place  \n",
    "    label = \"{:.4f}\".format(x_value)  \n",
    "  \n",
    "    ##create annotation  \n",
    "    plt.annotate(  \n",
    "        label,                      ##use `label` as label  \n",
    "        (x_value, y_value),         ##place label at end of the bar  \n",
    "        xytext=(space, 0),          ##horizontally shift label by `space`  \n",
    "        textcoords=\"offset points\", ##interpret `xytext` as offset in points  \n",
    "        va='center',                ##vertically center label  \n",
    "        ha=ha,  \n",
    "        fontsize=16)                 \n",
    "      \n",
    "plt.show()  \n",
    "  \n",
    "##saving plot  \n",
    "figure = bpdc1.get_figure()      \n",
    "figure.savefig('hs_dynamics_barplot_country1.png', dpi=450, bbox_inches='tight')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##counting median an quartiles for 'Happiness Score'  \n",
    "data_all_bpr = data_all_bpr.round(4) ##rounding data  \n",
    "data_all_bpr = data_all_bpr.sort_values(by = 'Happiness Score', ascending = False) ##sorting data  \n",
    "data_all_bpr.reset_index(level=0, inplace=True) ##resetting index  \n",
    "data_all_bpr.head()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##using 'describe' function with 'groupby' for  counting median and quartiles\n",
    "data_all_bpr.groupby('Region').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##counting median an quartiles for dynamics of 'Happiness Score'  \n",
    "data_dyn2016bp = data2016_df[['Country', 'Happiness Score', 'Region']] ##new data frame  \n",
    "data_dyn2017bp = data2017_df_reg[['Country', 'Happiness.Score', 'Region']] ##new data frame  \n",
    "##merging data with 'merg' method   \n",
    "data_dynbp = pd.merge(data_dyn2017bp, data_dyn2016bp, how = 'inner', on = ('Country', 'Region'))  \n",
    "##inspecting data  \n",
    "data_dynbp.info()  \n",
    "data_dynbp.head()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##using 'describe' function with 'groupby' for  counting median and quartiles  \n",
    "data_dynbp['Dynamics'] = data_dynbp['Happiness.Score'] - data_dynbp['Happiness Score'] ##counting dynamics  \n",
    "data_dynbp_fin = data_dynbp[['Region', 'Dynamics']] ##new data frame  \n",
    "data_dynbp_fin.groupby('Region').describe()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##boxplot for 'Happiness Score' in Regions with methods 'boxplot' and 'swarmplot'  \n",
    "## Usual boxplot  \n",
    "bp1 = sns.boxplot(x='Region', y='Happiness Score', data=data_all_bpr)  \n",
    "## Add jitter with the swarmplot function.  \n",
    "bp1 = sns.swarmplot(x='Region', y='Happiness Score', data=data_all_bpr, color='moccasin', size=3)  \n",
    "  \n",
    "##modifying title and labels  \n",
    "bp1.set_title('Box plot for average of Happiness Score 2015-2017|Region', fontsize=12, color='navy', fontweight='bold')  \n",
    "x_obj = plt.xlabel('Region', fontsize=12)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Happiness Score', fontsize=12)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "##changing rotation of labels  \n",
    "for item in bp1.get_xticklabels():  \n",
    "    item.set_rotation(90)  \n",
    "      \n",
    "plt.show()  \n",
    "##saving plot with optimal size  \n",
    "figure = bp1.get_figure()   \n",
    "figure.savefig('bphs.png', dpi=900, bbox_inches='tight')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##boxplot for 'Happiness Score' in Regions with methods 'boxplot' and 'swarmplot'  \n",
    "## Usual boxplot  \n",
    "bp2 = sns.boxplot(x='Region', y='Dynamics', data=data_dynbp_fin)  \n",
    "## Add jitter with the swarmplot function.  \n",
    "bp2 = sns.swarmplot(x='Region', y='Dynamics', data=data_dynbp_fin, color='moccasin', size=3)  \n",
    "  \n",
    "##modifying title and labels  \n",
    "bp2.set_title('Box plot for average dynamics of Happiness Score 2016-2017|Region', fontsize=12, color='navy', fontweight='bold')  \n",
    "x_obj = plt.xlabel('Region', fontsize=12)  \n",
    "plt.setp(x_obj, color='navy')  \n",
    "y_obj = plt.ylabel('Dynamics', fontsize=12)  \n",
    "plt.setp(y_obj, color='navy')  \n",
    "  \n",
    "##changing rotation of labels  \n",
    "for item in bp2.get_xticklabels():  \n",
    "    item.set_rotation(90)  \n",
    "      \n",
    "plt.show()  \n",
    "##saving plot with optimal size  \n",
    "figure = bp2.get_figure()   \n",
    "figure.savefig('bpdhs.png', dpi=900, bbox_inches='tight')  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
